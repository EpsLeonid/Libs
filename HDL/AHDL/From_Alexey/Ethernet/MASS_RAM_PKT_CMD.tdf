TITLE "Ethernet packets byte RAM";
-- OSI model   OpenSystem Interface
-- This Module produce function of "Ethernet Signal layer to Data Link layer bridge"
-- Media layer to Electrical Layer is done by external chip LXT972
-- Electrical Layer to Signaling Layer is done by "Tx_Eth100_Sync" and "Fr_ether100_new" functions

INCLUDE "Edge_Sensing_Sync.inc";
INCLUDE "lpm_shiftreg.inc";
INCLUDE "lpm_counter.inc";
INCLUDE "EthBufferRAM2048.inc";
INCLUDE "RAM2048_2p.inc";
INCLUDE "Eth_MAC_Decoder.inc";
INCLUDE "Eth_ARP_Decoder.inc";
INCLUDE "Eth_IPv4_Decoder.inc";
INCLUDE "Eth_Raw_Decoder.inc";
INCLUDE "Eth_CCCD_Decoder.inc";
INCLUDE "IPv4_checkSum.inc";
--INCLUDE "Eth_In_FIFO4kb.inc";


CONSTANT PacketLenghts_at_signaling_layer  = 4096;--2048;-- maximum length value in bytes
CONSTANT RxByte_Cnt_Width = Ceil( LOG2(PacketLenghts_at_signaling_layer));

Constant WORD_WIDTH	= 16; 

CONSTANT ETH_HEADER_LENGTH = 14;
CONSTANT IP_HEADER_LENGTH  = 20;
CONSTANT UDP_HEADER_LENGTH = 8;
CONSTANT OPCODE_LENGTH = 2;

CONSTANT KLUKVA_DATA_LENGTH = ((32+512+32)*2)*2; --2304;
CONSTANT HEADER_LENGTH_BYTES = ETH_HEADER_LENGTH + IP_HEADER_LENGTH + UDP_HEADER_LENGTH + OPCODE_LENGTH;
CONSTANT HEADER_LENGTH_WORDS = HEADER_LENGTH_BYTES div 2;
CONSTANT MASS_RAM_BYTE_Tx_Num = HEADER_LENGTH_BYTES + KLUKVA_DATA_LENGTH;

CONSTANT MASS_RAM_WORDS_Tx_Num = MASS_RAM_BYTE_Tx_Num div 2;

--CONSTANT MASS_RAM_BYTE_Tx_Num = 40+4+2304; -- (IP header + UDP header) + command + (addr+data)
-- размер для поля "Total length"=MASS_RAM_BYTE_Tx_Num-14
-- размер для поля "длинна UDP"=MASS_RAM_BYTE_Tx_Num-(14+20)

-- payload = (576*2)*2 bytes = 2304



SUBDESIGN MASS_RAM_PKT_CMD
(
  Clock                         : input; -- System Clock, really Bus_Clock

  RxIntStart                    : input;
  RxIntStart_out                : output;
   
  Packet_Decode_Error			: output; --next packet is detected while current packet is in processing
  
  Out_FIFO_full                 : input;
  Dummy_Tx_End					: output; -- конец передачи из буфера отправки
  Dummy_Tx_Cycle      			: output;
  Dummy_Tx_Data[7..0]      		: output;
  Dummy_Tx_Data_Valid           : output;
  Eth_Tx_Cycle					: input;
  Eth_Tx_End					: input;
  
  Dummy_AnswerTxStartAR			: output;
  Dummy_AnswerTxStartAG			: input;
  
  Eth_RxTx_In_Progress			: output; -- модуль обрабатывает пакет
  
  MAC_Addr[2..0][15..0]         : input;
  IP_Addr[1..0][15..0]          : input;
  Port_Number[15..0]          	: input;

  -- Standard bus connections
  BUS_Clock                     : input;
  DataBus_In[15..0]			    : input;  -- отправляемые с Внутренней Шины в Модуль данные
  DataBusOut[15..0]     	  	: output; -- выдаваемые на Внутреннюю Шину из Модуля данные (младшие 16бит шины R)
  
  DataBusStrobe 			 	: input;  -- строб приема/передачи данных наружу (высокий уровень, защелкиваем по заднему фронту)
  Select					 	: input;  -- Выбор Модуля для работы с памятью Командного Листа в режиме Slave (с КАМАК-ом)
  DirectIn					  	: input;  -- направление передачи данных, Если =GND, то данный Модуль читается, если =VCC, то пишется.
  AddrBus_In[12..0]			 	: input;  -- адрес при операциях доступа чтения/записи Командного Листа с КАМАК-а
  Reset                        	: input = GND;
  	-- Master Mode Signals 
  AccessRequest			    	: output;
  AccessGranted			    	: input; 
  DirectOut				    	: output;
  AddrBusOut[15..0]	    		: output;
	

)
VARIABLE
   RxReadyToRecive              			: SRFF;
   SetRxReadyToRecive           			: node;
   SetRxReadyToRecive_Parcer				: node;
   SetRxReadyToRecive_Sc_Bus                : node;
   Rx_RAM_Address_Bus[RxByte_Cnt_Width-2..0]: node;
   
   RxIntRAM                    				: RAM2048_2p;
   RxIntRAM_CS								: node;
   RxIntStart_ES                            : Edge_Sensing_Sync;
   RxIntStart_node                          : node;
   Buffer_RAM_Data[WORD_WIDTH-1..0]         : node;
      
   Status_REG                   			: LPM_SHIFTREG with (lpm_width=WORD_WIDTH); -- статус проиходящего (идет прием или передача)
   Status_REG_CS                			: node;
   Status_REG_ES							: Edge_Sensing_Sync;   
   
   TxByte_Cnt       	    				: LPM_COUNTER WITH (LPM_WIDTH = RxByte_Cnt_Width+1);
   TxRAM                    				: EthBufferRAM2048;
   Tx_RAM_Address_Bus[RxByte_Cnt_Width-2..0]: node;
   Tx_RAM_Data_Bus[WORD_WIDTH-1..0]         : node;
   TxRAM_CS                 				: node;
   TxRQ_Reset								: node;
   TxRQ_Reset_ES                			: Edge_Sensing_Sync;
   TxRQ_SRFF                    			: SRFF;
   --InternalTxStart              			: node;
   AnswerTxStart							: node;
   AnswerTxStart_							: node;
   TxStart									: node; 
   
   PacketLenghts_to_be_transmitted_Reg    	: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   PacketLenghts_to_be_transmitted_Reg_CS 	: node;
   PacketLenghts_DataBus[WORD_WIDTH-1..0] 	: node;
   PacketLenghts_to_be_transmitted_Reg_EN 	: node;

   TxRAM_wren                               : node;
  
   RxWordRecive_Reg							: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   Rx_Packet_Lenght_Reg						: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   ParcerCycle_SRFF                         : SRFF;
   ParcerCycleEnd                           : node;
   ParcerCycleERR							: node;
   
   MAC_Decoder                              : Eth_MAC_Decoder;
   
   ARP_Decoder                              : Eth_ARP_Decoder;
   IPv4_Decoder                             : Eth_IPv4_Decoder;
   Raw_Decoder                              : Eth_Raw_Decoder;
   CCCD_Decoder                             : Eth_CCCD_Decoder;
   
   Test_Reg									: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   Test_Reg_CS				   	   			: node;
   
   
   DataBusOut_[15..0]						: node;	
   
   IPv4_CheckSum_Ctrl						: IPv4_checkSum;
   
   Rx_Packet_Cnt							: LPM_COUNTER WITH (LPM_WIDTH = 16);
   Tx_Packet_Cnt							: LPM_COUNTER WITH (LPM_WIDTH = 16);
   Rx_Packet_Cnt_Reset						: node;
   Tx_Packet_Cnt_Reset						: node;
   
   
   
   ParcerCycleERR_Reg						: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   
  
BEGIN

	 RxIntStart_out = RxIntStart;


-------------------------------------------- Rx section --------------------------------------------
   RxReadyToRecive.(S,clk,R) = (SetRxReadyToRecive, Clock, RxIntStart_ES.q);
   SetRxReadyToRecive = SetRxReadyToRecive_Sc_Bus OR SetRxReadyToRecive_Parcer;
   Eth_RxTx_In_Progress = !RxReadyToRecive.q;
  
   Packet_Decode_Error = GND;--Cnt_Overflow_Edge.q ; -- пакет имеет ошибки по ИЛИ весь перечень
   
   RxIntStart_ES.(d,clk)     = (RxIntStart AND DFF(.d=RxReadyToRecive.q,.clk=Clock), Clock);
   RxIntStart_node           = DFF(.d=RxIntStart_ES.q,.clk=Clock);
   
   ------------------------------------------- Tx section ------------------------------------------------- 
   -- условие на запуск отправки ответа из Tx буфера
   AnswerTxStart_ = Edge_Sensing_Sync(.d=ARP_Decoder.Tx_Start OR IPv4_CheckSum_Ctrl.IPv4_CheckSum_Complete OR CCCD_Decoder.Tx_Start OR Raw_Decoder.Tx_Start,.clk=Clock);
   Dummy_AnswerTxStartAR  = SRFF(.S=AnswerTxStart_,.clk=Clock,.R=Dummy_AnswerTxStartAG,.clk=Clock);
   AnswerTxStart     = Dummy_AnswerTxStartAG;

   
   --AnswerTxStart = Edge_Sensing_Sync(.d=SRFF(.S=AnswerTxStart_,.clk=Clock,.R=TxRQ_Reset OR Eth_Tx_End,.clk=Clock) AND !(TxRQ_SRFF.q OR Eth_Tx_Cycle),.clk=Clock); -- пакет обработан, ожидает когда освободится передатчик
   
   --TxStart = InternalTxStart OR AnswerTxStart;
   TxStart = AnswerTxStart;
   TxRQ_SRFF.(S,clk,R) = (DFF(.d=TxStart,.clk=Clock), Clock, TxRQ_Reset_ES.q OR Reset); 
   TxByte_Cnt.(clock,clk_en,cnt_en,sclr) = (Clock,VCC, TxRQ_SRFF.q AND !Out_FIFO_full, DFF(.d=TxStart,.clk=Clock));
   IF ((TxByte_Cnt.q[] >= PacketLenghts_at_signaling_layer-1) OR (TxByte_Cnt.q[] >= PacketLenghts_to_be_transmitted_Reg.q[RxByte_Cnt_Width..0]))
  		THEN TxRQ_Reset	= VCC;
		ELSE TxRQ_Reset	= GND;
   END IF;
   TxRQ_Reset_ES.(d,clk) = (TxRQ_Reset,Clock);
  
 
   TxRAM.data_a[7..0] = GND;  
   TxRAM.(address_a[RxByte_Cnt_Width-1..0]   , clock_a, wren_a) =
         (TxByte_Cnt.q[RxByte_Cnt_Width-1..0], Clock  , GND   ); 


   TxRAM.clock_b = BUS_Clock;
   TxRAM.address_b[RxByte_Cnt_Width-2..0] = Tx_RAM_Address_Bus[RxByte_Cnt_Width-2..0];
   TxRAM.data_b[] = Tx_RAM_Data_Bus[];
   TxRAM.wren_b   = TxRAM_wren;
         
   Dummy_Tx_Cycle      = SRFF(.S=TxStart,.clk=Clock,.R=DFF(.d=TxRQ_Reset_ES.q,.clk=Clock)OR Reset);
   Dummy_Tx_Data_Valid = TxRQ_SRFF.q;
   Dummy_Tx_Data[7..0] = TxRAM.q_a[];
   Dummy_Tx_End        = TxRQ_Reset_ES.q; -- инкриментируем счетчик-указатель прочитанных данных
  -----------------------------Буферная память для отправки данных из массовой памяти--------------------------------  
   RxIntRAM.(address_a[]     	 , clock_a  , data_a[15..8]   , data_a[7..0]     , wren_a  ) =
            (Rx_RAM_Address_Bus[], BUS_Clock  , DataBus_In[7..0], DataBus_In[15..8], GND); 
   RxIntRAM.(address_b[] 		 			  , clock_b  , data_b[15..8]   , data_b[7..0]     , wren_b  ) =
            (AddrBus_In[RxByte_Cnt_Width-2..0], BUS_Clock, DataBus_In[7..0], DataBus_In[15..8], RxIntRAM_CS AND DataBusStrobe AND DirectIn AND Select); 

   Buffer_RAM_Data[]=RxIntRAM.q_a[];
   -------------------------------------------------------------------------------------------------------------------  
       
    
   ------------------- данные приняты, необходимо разобраться в них 
   ParcerCycle_SRFF.(S,clk,R) = (RxIntStart_ES.q,Clock,ParcerCycleEnd);   -- цикл по разборке полученных данных по концу принятия кадра
   ParcerCycleEnd = Edge_Sensing_Sync(.d=(MAC_Decoder.Rx_Error_MAC OR ARP_Decoder.Rx_TRUE_RQ OR IPv4_Decoder.Rx_Error_IP OR ARP_Decoder.Rx_IP_Error OR IPv4_CheckSum_Ctrl.IPv4_CheckSum_Complete OR CCCD_Decoder.Rx_TRUE_RQ OR Raw_Decoder.Rx_TRUE_RQ OR Raw_Decoder.Rx_NOT_RQ),.clk=Clock);
   SetRxReadyToRecive_Parcer = Edge_Sensing_Sync(.d=TxRQ_Reset_ES.q OR MAC_Decoder.Rx_Error_MAC OR ARP_Decoder.Rx_IP_Error OR IPv4_Decoder.Rx_Error_IP OR Raw_Decoder.Rx_NOT_RQ,.clk=Clock);

   ParcerCycleERR = Edge_Sensing_Sync(.d=(MAC_Decoder.Rx_Error_MAC OR IPv4_Decoder.Rx_Error_IP OR ARP_Decoder.Rx_IP_Error OR Raw_Decoder.Rx_NOT_RQ),.clk=Clock); 
   ParcerCycleERR_Reg.data[0] = MAC_Decoder.Rx_Error_MAC;
   ParcerCycleERR_Reg.data[1] = IPv4_Decoder.Rx_Error_IP;
   ParcerCycleERR_Reg.data[2] = Raw_Decoder.Rx_NOT_RQ;
   ParcerCycleERR_Reg.data[3] = GND;
   ParcerCycleERR_Reg.data[7..4] = VCC;
   ParcerCycleERR_Reg.data[15..8] = GND;
   ParcerCycleERR_Reg.clock = BUS_Clock;
   ParcerCycleERR_Reg.enable = ParcerCycleERR;															   

  
   -- MAC адрес декодируется и запоминается только по посылкам пришедшим из Ethernet 
   MAC_Decoder.Clock = Clock;
   MAC_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset) 	 = (Buffer_RAM_Data[]		 , RxIntStart_ES.q, SetRxReadyToRecive);
   MAC_Decoder.(MAC_Addr0_[15..8], MAC_Addr0_[7..0]) = (MAC_Addr[0][7..0], MAC_Addr[0][15..8]);
   MAC_Decoder.(MAC_Addr1_[15..8], MAC_Addr1_[7..0]) = (MAC_Addr[1][7..0], MAC_Addr[1][15..8]);
   MAC_Decoder.(MAC_Addr2_[15..8], MAC_Addr2_[7..0]) = (MAC_Addr[2][7..0], MAC_Addr[2][15..8]);
  
   -- защелкиваем число принятых байт(включительно 4 байта CRC) и пересчитываем в 16битные слова
   --Rx_Packet_Lenght_Reg.(data[15..RxByte_Cnt_Width],data[RxByte_Cnt_Width-1..0]) = (B"0000",(MASS_RAM_WORDS_Tx_Num-(HEADER_LENGTH_WORDS-1)));
   Rx_Packet_Lenght_Reg.data[15..RxByte_Cnt_Width]  = GND;
   Rx_Packet_Lenght_Reg.data[RxByte_Cnt_Width-1..0] = MASS_RAM_WORDS_Tx_Num-HEADER_LENGTH_WORDS-1;
   Rx_Packet_Lenght_Reg.(clock,enable,load) = (Clock, RxIntStart_node,VCC); 

   
   RxWordRecive_Reg.data[15..RxByte_Cnt_Width]  = GND;
   RxWordRecive_Reg.data[RxByte_Cnt_Width-1..0] = MASS_RAM_WORDS_Tx_Num;
   RxWordRecive_Reg.(clock,enable,load) = (Clock, RxIntStart_node,VCC); 

   
   ARP_Decoder.Clock = Clock;
   ARP_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset) = (Buffer_RAM_Data[],  MAC_Decoder.Next_Parcer, SetRxReadyToRecive);
   ARP_Decoder.(MAC_Addr0_[15..8], MAC_Addr0_[7..0]) = (MAC_Addr[0][7..0], MAC_Addr[0][15..8]);
   ARP_Decoder.(MAC_Addr1_[15..8], MAC_Addr1_[7..0]) = (MAC_Addr[1][7..0], MAC_Addr[1][15..8]);
   ARP_Decoder.(MAC_Addr2_[15..8], MAC_Addr2_[7..0]) = (MAC_Addr[2][7..0], MAC_Addr[2][15..8]);
   ARP_Decoder.(IP_Addr0_[15..8], IP_Addr0_[7..0]) = (IP_Addr[0][7..0], IP_Addr[0][15..8]);
   ARP_Decoder.(IP_Addr1_[15..8], IP_Addr1_[7..0]) = (IP_Addr[1][7..0], IP_Addr[1][15..8]);
   
   IPv4_Decoder.Clock = Clock;
   IPv4_Decoder.Rx_NUM_Data[] = RxWordRecive_Reg.q[RxByte_Cnt_Width-2..0]-2;
   IPv4_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[],  ARP_Decoder.Rx_NOT_RQ, SetRxReadyToRecive);
   IPv4_Decoder.(IP_Addr0_[15..8], IP_Addr0_[7..0]) = (IP_Addr[0][7..0], IP_Addr[0][15..8]);
   IPv4_Decoder.(IP_Addr1_[15..8], IP_Addr1_[7..0]) = (IP_Addr[1][7..0], IP_Addr[1][15..8]);
   IPv4_Decoder.(Port[15..8], Port[7..0]) 			= (Port_Number[7..0], Port_Number[15..8]);
   IPv4_Decoder.DataBus_In[] = DataBus_In[];
   IPv4_Decoder.(AccessGranted, DataBusStrobe) = (AccessGranted, DataBusStrobe);
   
   IPv4_CheckSum_Ctrl.Clock = Clock;
   IPv4_CheckSum_Ctrl.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[], IPv4_Decoder.Tx_Start, SetRxReadyToRecive);
   IPv4_CheckSum_Ctrl.IP_ID[] = IPv4_Decoder.Identification[];
   
   CCCD_Decoder.Clock = Clock;
   CCCD_Decoder.Rx_NUM_Data[] = RxWordRecive_Reg.q[RxByte_Cnt_Width-2..0];
   CCCD_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[],  IPv4_Decoder.Rx_NOT_RQ, SetRxReadyToRecive);
   CCCD_Decoder.Rx_Packet_Lenght[]  = Rx_Packet_Lenght_Reg.q[];--(RxWordRecive_Reg.q[]-(HEADER_LENGTH_WORDS-1));--42);
   CCCD_Decoder.DataBus_In[] = DataBus_In[];
   CCCD_Decoder.(AccessGranted, DataBusStrobe) = (AccessGranted, DataBusStrobe);
   
   Raw_Decoder.Clock = Clock;
   Raw_Decoder.Rx_NUM_Data[] = RxWordRecive_Reg.q[RxByte_Cnt_Width-2..0];
   Raw_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[], CCCD_Decoder.Rx_NOT_RQ, SetRxReadyToRecive);
   Raw_Decoder.Rx_Packet_Lenght[]  = Rx_Packet_Lenght_Reg.q[];--(RxWordRecive_Reg.q[]-(HEADER_LENGTH_WORDS-1));--42);
   Raw_Decoder.DIMA_Ident[] = Test_Reg.q[];
   Raw_Decoder.DataBus_In[] = DataBus_In[];
   Raw_Decoder.(AccessGranted, DataBusStrobe) = (AccessGranted, DataBusStrobe);
   

   
   
   AccessRequest = IPv4_Decoder.AccessRequest OR Raw_Decoder.AccessRequest OR CCCD_Decoder.AccessRequest;
   DirectOut     = IPv4_Decoder.DirectOut 	  OR Raw_Decoder.DirectOut 	   OR CCCD_Decoder.DirectOut;
   AddrBusOut[]  = IPv4_Decoder.AddrBusOut[]  OR Raw_Decoder.AddrBusOut[]  OR CCCD_Decoder.AddrBusOut[];
    
     
  IF(ParcerCycle_SRFF.q == VCC) THEN  FOR i IN 0 TO RxByte_Cnt_Width-2 GENERATE  
									    Tx_RAM_Address_Bus[i]  = DFF(.d=MAC_Decoder.Tx_Addr[i] OR ARP_Decoder.Tx_Addr[i] OR IPv4_Decoder.Tx_Addr[i] OR Raw_Decoder.Tx_Addr[i] OR IPv4_CheckSum_Ctrl.Tx_Addr[i] OR CCCD_Decoder.Tx_Addr[i],.clk=Clock);
									  END GENERATE;
									  Rx_RAM_Address_Bus[]     = MAC_Decoder.Rx_Addr[RxByte_Cnt_Width-2..0] 		OR 
																 ARP_Decoder.Rx_Addr[RxByte_Cnt_Width-2..0] 		OR 
																 IPv4_Decoder.Rx_Addr[RxByte_Cnt_Width-2..0] 		OR 
																 Raw_Decoder.Rx_Addr[RxByte_Cnt_Width-2..0] 		OR 
																 IPv4_CheckSum_Ctrl.Rx_Addr[RxByte_Cnt_Width-2..0] 	OR 
																 CCCD_Decoder.Rx_Addr[RxByte_Cnt_Width-2..0];
									  FOR i IN 0 TO 15 GENERATE 
										Tx_RAM_Data_Bus[i] 	   = DFF(.d=MAC_Decoder.Tx_Data[i] OR ARP_Decoder.Tx_Data[i] OR IPv4_Decoder.Tx_Data[i] OR Raw_Decoder.Tx_Data[i] OR IPv4_CheckSum_Ctrl.Tx_Data[i] OR CCCD_Decoder.Tx_Data[i],.clk=Clock);
									  END GENERATE;
                                      TxRAM_wren			   = DFF(.d=MAC_Decoder.Tx_Word_Strobe OR ARP_Decoder.Tx_Word_Strobe OR IPv4_Decoder.Tx_Word_Strobe OR Raw_Decoder.Tx_Word_Strobe OR IPv4_CheckSum_Ctrl.Tx_Word_Strobe OR CCCD_Decoder.Tx_Word_Strobe,.clk=Clock);
                                 ELSE Tx_RAM_Address_Bus[RxByte_Cnt_Width-2..0] = AddrBus_In[RxByte_Cnt_Width-2..0];
                                      Tx_RAM_Data_Bus[15..8]   = DataBus_In[7..0]; Tx_RAM_Data_Bus[7..0] = DataBus_In[15..8];
                                      TxRAM_wren	           = TxRAM_CS AND DataBusStrobe AND DirectIn AND Select;
                                      Rx_RAM_Address_Bus[]     = AddrBus_In[RxByte_Cnt_Width-2..0];
   END IF;
    
--------------------------------------- BUS Section ---------------------------------------------------   
    
--************************************************************************* 
-- модуль является мастером и идет операция чтения или в модуль обращается другой мастер
   CASE  (Select, DirectOut,ParcerCycle_SRFF.q) IS          
		  WHEN b"100"  => DataBusOut[]      = DataBusOut_[]; -- идет чтение со скелеткой шины
		  WHEN b"110"  => DataBusOut[]      = DataBusOut_[]; -- идет запись со скелеткой шины
	      WHEN b"011"  => DataBusOut[15..8] = Buffer_RAM_Data[7..0];  -- идет запись обработанной посылки из Ethernet
						  DataBusOut[7..0]  = Buffer_RAM_Data[15..8]; 
 	      WHEN b"111"  => DataBusOut[15..8] = Buffer_RAM_Data[7..0];  -- идет запись обработанной посылки из Ethernet
						  DataBusOut[7..0]  = Buffer_RAM_Data[15..8]; 
		  WHEN b"101"  => DataBusOut[]      = DataBusOut_[];
	      WHEN OTHERS  => DataBusOut[]      = GND; 
   END CASE;
    
    IF ( (AddrBus_In[] >= 0) AND (AddrBus_In[] < 1024) ) 
			THEN DataBusOut_[7..0] = TxRAM.q_b[15..8]; DataBusOut_[15..8] = TxRAM.q_b[7..0]; --DataBusOut[] = TxRAM.q_b[];
				 TxRAM_CS     = VCC;    
			ELSE TxRAM_CS     = GND;     
	END IF;
   
	IF (AddrBus_In[] ==  2048) THEN DataBusOut_[]  = Status_REG.q[];
										Status_REG_CS = VCC;  
								   ELSE Status_REG_CS = GND; 
	END IF;
	IF (AddrBus_In[] ==  2049) 
				THEN SetRxReadyToRecive_Sc_Bus = DataBusStrobe; 
				ELSE SetRxReadyToRecive_Sc_Bus = GND; 
	END IF;
--	IF (AddrBus_In[] ==  2050) 
--				THEN InternalTxStart    = DataBusStrobe;
--				ELSE InternalTxStart    = GND;
--	END IF;
	IF (AddrBus_In[] ==  2051) THEN DataBusOut_[] = PacketLenghts_to_be_transmitted_Reg.q[];
										PacketLenghts_to_be_transmitted_Reg_CS = VCC;
								   ELSE PacketLenghts_to_be_transmitted_Reg_CS = GND;
	END IF;
        -- MAC-адрес и IP-адрес мезанина
	FOR i IN 0 TO 2 GENERATE  -- MAC-адрес
			IF (AddrBus_In[] ==  2053+i) THEN DataBusOut_[] = MAC_Addr[i][];
			END IF;
	END GENERATE;
	FOR i IN 0 TO 1 GENERATE  --IP-адрес мезанина
			IF (AddrBus_In[] ==  2056+i) THEN DataBusOut_[] = IP_Addr[i][];
			END IF;
	END GENERATE;
		
		-- MAC-адрес последнего отправившего посылку устройства
--	IF (AddrBus_In[] ==  2058) THEN DataBusOut_[7..0] = Source_MAC_Reg[0].q[15..8]; DataBusOut_[15..8] = Source_MAC_Reg[0].q[7..0]; END IF;
--	IF (AddrBus_In[] ==  2059) THEN DataBusOut_[7..0] = Source_MAC_Reg[1].q[15..8]; DataBusOut_[15..8] = Source_MAC_Reg[1].q[7..0]; END IF;
--	IF (AddrBus_In[] ==  2060) THEN DataBusOut_[7..0] = Source_MAC_Reg[2].q[15..8]; DataBusOut_[15..8] = Source_MAC_Reg[2].q[7..0]; END IF;

		
		-- Port мезанина
	IF (AddrBus_In[] ==  2061) THEN DataBusOut_[] = Port_Number[];
	END IF;
		
	IF (AddrBus_In[] ==  2062) THEN DataBusOut_[] = Test_Reg.q[];
                                        Test_Reg_CS  = VCC;
		                           ELSE Test_Reg_CS  = GND;
	END IF;
	
	IF (AddrBus_In[] ==  2063) THEN DataBusOut_[] = IPv4_Decoder.Identification[]; END IF;
	IF (AddrBus_In[] ==  2064) THEN DataBusOut_[] = Raw_Decoder.Identification[];  END IF;
	
	IF (AddrBus_In[] ==  2065) THEN DataBusOut_[] = Rx_Packet_Cnt.q[]; END IF;
	IF (AddrBus_In[] ==  2066) THEN DataBusOut_[] = Tx_Packet_Cnt.q[]; END IF;
	IF (AddrBus_In[] ==  2067) THEN DataBusOut_[] = GND; Rx_Packet_Cnt_Reset = DataBusStrobe AND DirectIn AND Select; 
							   ELSE Rx_Packet_Cnt_Reset = GND;
	END IF;
	IF (AddrBus_In[] ==  2068) THEN DataBusOut_[] = GND; Tx_Packet_Cnt_Reset = DataBusStrobe AND DirectIn AND Select;
							   ELSE Tx_Packet_Cnt_Reset = GND;
	END IF;
	-- число байт отправляемых из массовой памяти
	IF (AddrBus_In[] ==  2069) THEN DataBusOut_[] = MASS_RAM_BYTE_Tx_Num; END IF;
		
	IF ( (AddrBus_In[] >= 4096) AND (AddrBus_In[] <= 6143) )
			THEN DataBusOut_[7..0] = RxIntRAM.q_b[15..8]; DataBusOut_[15..8] = RxIntRAM.q_b[7..0]; 
				 RxIntRAM_CS     = VCC;    
			ELSE RxIntRAM_CS     = GND;     
	END IF;
	
   
--***************************************************************************
   
      
   Test_Reg.(data[],clock, load, enable) = (DataBus_In[],Clock,VCC, Test_Reg_CS AND DataBusStrobe AND DirectIn AND Select);
    
   Status_REG_ES.(d,clk) 				   	= (Status_REG_CS AND Select, Clock);
   Status_REG.(clock, load, enable) 	   	= (BUS_Clock, VCC,  Status_REG_ES.q);
   Status_REG.data[3..0]   			   	    = ParcerCycleERR_Reg.q[3..0];
   Status_REG.data[7..4]   			   	    = ParcerCycleERR_Reg.q[7..4];
   
   Status_REG.data[8]   			   	    = GND;
   Status_REG.data[9]   			   	    = GND;
   Status_REG.data[10]   			   		= ParcerCycle_SRFF.q;
   Status_REG.data[11]   			   		= RxIntStart;
   
   Status_REG.data[12]   			   		= AnswerTxStart;
   Status_REG.data[13]     				   	= RxReadyToRecive.q;
   Status_REG.data[14]     					= Eth_Tx_Cycle;--IPv4_Decoder.Rx_NOT_RQ;--RxPacket_in_progress;
   Status_REG.data[15]     				    = TxRQ_SRFF;--Raw_Decoder.Tx_Start;--ARP_Decoder.Test;--ARP_Decoder.Rx_Error;%

  
   -- определяем число отправляемых байт
   PacketLenghts_to_be_transmitted_Reg.(data[],clock, load, enable) = (PacketLenghts_DataBus[], BUS_Clock, VCC, PacketLenghts_to_be_transmitted_Reg_EN);
   IF(Select==VCC) THEN PacketLenghts_DataBus[] = DataBus_In[];  PacketLenghts_to_be_transmitted_Reg_EN = (PacketLenghts_to_be_transmitted_Reg_CS AND DataBusStrobe AND DirectIn AND Select);
                   ELSE 
                        PacketLenghts_DataBus[RxByte_Cnt_Width..0]  = MASS_RAM_BYTE_Tx_Num-1;--(RxByte_Cnt.q[]-1); --MASS_RAM_BYTE_Tx_Num-1;--
						PacketLenghts_DataBus[15..RxByte_Cnt_Width+1] = GND;
						PacketLenghts_to_be_transmitted_Reg_EN = RxIntStart_ES.q;--AnswerTxStart;
   END IF; 
     
   ------------ счетчики пришедших(опознаным MAC-адресом) и отправленных пакетов
   Rx_Packet_Cnt.(clock,cnt_en,sclr) = (BUS_Clock,Edge_Sensing_Sync(.d=MAC_Decoder.Next_Parcer,.clk=BUS_Clock),Rx_Packet_Cnt_Reset);  
   Tx_Packet_Cnt.(clock,cnt_en,sclr) = (BUS_Clock,Edge_Sensing_Sync(.d=TxStart,.clk=BUS_Clock),Tx_Packet_Cnt_Reset);  


END;